#include <iostream>
#include <string>
#include <vector>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>

#pragma comment(lib, "ws2_32.lib")

// Function to convert hex string to byte array
std::vector<u_int> hexStringToBytes(const std::string& hex) {
    std::vector<u_int> bytes;
    
    for (size_t i = 0; i < hex.length(); i += 2) {
        std::string byteString = hex.substr(i, 2);
        u_int byte = static_cast<u_int>(strtol(byteString.c_str(), nullptr, 16));
        bytes.push_back(byte);
    }
    
    return bytes;
}

// Function to send data to the device
bool sendToDevice(const std::string& ip, int port, const std::vector<u_int>& data) {
    // Initialize Winsock
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed" << std::endl;
        return false;
    }

    // Create socket
    SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == INVALID_SOCKET) {
        std::cerr << "Could not create socket: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return false;
    }
    
    // Setup server address structure
    sockaddr_in server;
    server.sin_addr.s_addr = inet_addr(ip.c_str());
    server.sin_family = AF_INET;
    server.sin_port = htons(port);
    
    // Connect to the device
    if (connect(sock, (sockaddr*)&server, sizeof(server)) == SOCKET_ERROR) {
        std::cerr << "Connection failed: " << WSAGetLastError() << std::endl;
        closesocket(sock);
        WSACleanup();
        return false;
    }
    
    // Send the data
    int bytesSent = send(sock, (const char*)data.data(), data.size(), 0);
    if (bytesSent == SOCKET_ERROR) {
        std::cerr << "Send failed: " << WSAGetLastError() << std::endl;
        closesocket(sock);
        WSACleanup();
        return false;
    }
    
    std::cout << "Sent " << bytesSent << " bytes to " << ip << ":" << port << std::endl;
    
    // Cleanup
    closesocket(sock);
    WSACleanup();
    return true;
}

int main() {
    // Device configuration
    const std::string deviceIP = "192.168.10.60";
    const int devicePort = 10001;
    
    // Hex data to send (example: 0x01 0x02 0xAB 0xCD)
    std::string hexData = R"(48 42 fd 00 92 e0 04 7c 16 cb 72 e9 08 00 45 00
00 00 a9 32 40 00 80 06 00 00 c0 a8 0a 4b c0 a8
0a 3c c2 26 25 37 93 18 b6 0c 55 df 18 b2 50 18
02 00 95 de 00 00 d0 19 19 00 3c 3f 78 6d 6c 20
76 65 72 73 69 6f 6e 3d 22 31 2e 30 22 20 65 6e
63 6f 64 69 6e 67 3d 22 55 54 46 2d 38 22 3f 3e
0d 0a 3c 4e 6f 64 65 20 4c 65 76 65 6c 3d 22 31
22 20 54 79 70 65 3d 22 48 44 5f 43 6f 6e 74 72
6f 6c 6c 65 72 5f 50 6c 75 67 69 6e 22 3e 0d 0a
20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e
61 6d 65 3d 22 41 70 70 56 65 72 73 69 6f 6e 22
3e 37 2e 31 30 2e 35 33 2e 30 3c 2f 41 74 74 72
69 62 75 74 65 3e 0d 0a 20 20 20 20 3c 41 74 74
72 69 62 75 74 65 20 4e 61 6d 65 3d 22 44 65 76
69 63 65 4d 6f 64 65 6c 22 3e 44 31 36 3c 2f 41
74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20 3c
41 74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22
48 65 69 67 68 74 22 3e 31 32 38 3c 2f 41 74 74
72 69 62 75 74 65 3e 0d 0a 20 20 20 20 3c 41 74
74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 49 6e
73 65 72 74 50 72 6f 6a 65 63 74 22 3e 30 3c 2f
41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20
3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d
22 4e 65 77 53 70 65 63 69 61 6c 45 66 66 65 63
74 22 3e 63 6c 6f 73 65 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 3c 41 74 74 72 69
62 75 74 65 20 4e 61 6d 65 3d 22 52 6f 74 61 74
69 6f 6e 22 3e 30 3c 2f 41 74 74 72 69 62 75 74
65 3e 0d 0a 20 20 20 20 3c 41 74 74 72 69 62 75
74 65 20 4e 61 6d 65 3d 22 53 74 72 65 74 63 68
22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d
0a 20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20
4e 61 6d 65 3d 22 53 76 6e 56 65 72 73 69 6f 6e
22 3e 31 33 36 39 31 3c 2f 41 74 74 72 69 62 75
74 65 3e 0d 0a 20 20 20 20 3c 41 74 74 72 69 62
75 74 65 20 4e 61 6d 65 3d 22 54 69 6d 65 5a 6f
6e 65 22 3e 31 38 30 30 30 3c 2f 41 74 74 72 69
62 75 74 65 3e 0d 0a 20 20 20 20 3c 41 74 74 72
69 62 75 74 65 20 4e 61 6d 65 3d 22 57 69 64 74
68 22 3e 32 35 36 3c 2f 41 74 74 72 69 62 75 74
65 3e 0d 0a 20 20 20 20 3c 41 74 74 72 69 62 75
74 65 20 4e 61 6d 65 3d 22 5a 6f 6f 6d 4d 6f 64
75 6c 75 73 22 3e 30 3c 2f 41 74 74 72 69 62 75
74 65 3e 0d 0a 20 20 20 20 3c 41 74 74 72 69 62
75 74 65 20 4e 61 6d 65 3d 22 5f 5f 4e 41 4d 45
5f 5f 22 3e 48 44 2d 44 31 36 3c 2f 41 74 74 72
69 62 75 74 65 3e 0d 0a 20 20 20 20 3c 41 74 74
72 69 62 75 74 65 20 4e 61 6d 65 3d 22 6d 69 6d
69 53 63 72 65 65 6e 22 3e 30 3c 2f 41 74 74 72
69 62 75 74 65 3e 0d 0a 20 20 20 20 3c 4c 69 73
74 20 4e 61 6d 65 3d 22 63 6f 6d 6d 75 6e 69 63
61 74 69 6f 6e 22 20 49 6e 64 65 78 3d 22 30 22
3e 0d 0a 20 20 20 20 20 20 20 20 3c 4c 69 73 74
49 74 65 6d 20 6e 61 6d 65 3d 22 22 20 69 64 3d
22 44 31 36 2d 44 32 34 2d 30 30 39 32 45 22 2f
3e 0d 0a 20 20 20 20 20 20 20 20 3c 4c 69 73 74
49 74 65 6d 20 6e 61 6d 65 3d 22 22 20 69 64 3d
22 44 31 36 2d 44 32 34 2d 30 30 39 33 30 22 2f
3e 0d 0a 20 20 20 20 3c 2f 4c 69 73 74 3e 0d 0a
20 20 20 20 3c 4e 6f 64 65 20 4c 65 76 65 6c 3d
22 32 22 20 54 79 70 65 3d 22 48 44 5f 4f 72 64
69 6e 61 72 79 53 63 65 6e 65 5f 50 6c 75 67 69
6e 22 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41 74
74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 41 6c
70 68 61 22 3e 32 35 35 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41
74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 42
67 43 6f 6c 6f 72 22 3e 2d 31 36 37 37 37 32 31
36 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20
20 20 20 20 20 20 20 3c 41 74 74 72 69 62 75 74
65 20 4e 61 6d 65 3d 22 42 67 4d 6f 64 65 22 3e
42 67 49 6d 61 67 65 3c 2f 41 74 74 72 69 62 75
74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41 74
74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 43 68
65 63 6b 65 64 22 3e 32 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41
74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 46
69 78 65 64 44 75 72 61 74 69 6f 6e 22 3e 33 30
30 30 30 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d
0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62
75 74 65 20 4e 61 6d 65 3d 22 46 72 61 6d 65 45
66 66 65 63 74 22 3e 30 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41
74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 46
72 61 6d 65 53 70 65 65 64 22 3e 34 3c 2f 41 74
74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20 20 20
20 20 3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d
65 3d 22 46 72 61 6d 65 54 79 70 65 22 3e 30 3c
2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20
20 20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20
4e 61 6d 65 3d 22 46 72 69 64 61 79 22 3e 30 3c
2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20
20 20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20
4e 61 6d 65 3d 22 4d 6f 6e 64 61 79 22 3e 30 3c
2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20
20 20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20
4e 61 6d 65 3d 22 4d 6f 74 6c 65 79 49 6e 64 65
78 22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65 3e
0d 0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69
62 75 74 65 20 4e 61 6d 65 3d 22 50 6c 61 79 49
6e 64 65 78 22 3e 30 3c 2f 41 74 74 72 69 62 75
74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41 74
74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 50 6c
61 79 4d 6f 64 65 22 3e 4c 6f 6f 70 54 69 6d 65
3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20
20 20 20 20 20 20 3c 41 74 74 72 69 62 75 74 65
20 4e 61 6d 65 3d 22 50 6c 61 79 54 69 6d 65 73
22 3e 31 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d
0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62
75 74 65 20 4e 61 6d 65 3d 22 50 6c 61 79 65 54
69 6d 65 22 3e 33 30 3c 2f 41 74 74 72 69 62 75
74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41 74
74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 50 75
72 69 74 79 43 6f 6c 6f 72 22 3e 32 35 35 3c 2f
41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20
20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e
61 6d 65 3d 22 50 75 72 69 74 79 49 6e 64 65 78
22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d
0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62
75 74 65 20 4e 61 6d 65 3d 22 53 61 74 75 72 64
61 79 22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65
3e 0d 0a 20 20 20 20 20 20 20 20 3c 41 74 74 72
69 62 75 74 65 20 4e 61 6d 65 3d 22 53 70 61 63
65 53 74 61 72 74 54 69 6d 65 22 3e 30 30 3a 30
30 3a 30 30 3c 2f 41 74 74 72 69 62 75 74 65 3e
0d 0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69
62 75 74 65 20 4e 61 6d 65 3d 22 53 70 61 63 65
53 74 6f 70 54 69 6d 65 22 3e 32 33 3a 35 39 3a
35 39 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a
20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62 75
74 65 20 4e 61 6d 65 3d 22 53 75 6e 64 61 79 22
3e 30 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a
20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62 75
74 65 20 4e 61 6d 65 3d 22 54 68 75 72 73 64 61
79 22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65 3e
0d 0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69
62 75 74 65 20 4e 61 6d 65 3d 22 54 72 69 63 6f
6c 6f 72 49 6e 64 65 78 22 3e 30 3c 2f 41 74 74
72 69 62 75 74 65 3e 0d 0a 20 20 20 20 20 20 20
20 3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d 65
3d 22 54 75 65 73 64 61 79 22 3e 30 3c 2f 41 74
74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20 20 20
20 20 3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d
65 3d 22 55 73 65 53 70 61 63 69 66 69 6c 65 64
22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d
0a 20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62
75 74 65 20 4e 61 6d 65 3d 22 56 6f 6c 75 6d 65
22 3e 31 30 30 3c 2f 41 74 74 72 69 62 75 74 65
3e 0d 0a 20 20 20 20 20 20 20 20 3c 41 74 74 72
69 62 75 74 65 20 4e 61 6d 65 3d 22 57 65 64 6e
65 73 64 61 79 22 3e 30 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 41
74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 5f
5f 47 55 49 44 5f 5f 22 3e 7b 38 66 32 38 34 30
30 61 2d 33 39 66 36 2d 34 33 36 31 2d 62 62 35
37 2d 33 63 66 64 66 37 63 38 61 61 30 36 7d 3c
2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20
20 20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20
4e 61 6d 65 3d 22 5f 5f 4e 41 4d 45 5f 5f 22 3e
50 72 6f 67 72 61 6d 32 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 3c 4c
69 73 74 20 4e 61 6d 65 3d 22 5f 5f 46 69 6c 65
4c 69 73 74 5f 5f 22 20 49 6e 64 65 78 3d 22 2d
31 22 2f 3e 0d 0a 20 20 20 20 20 20 20 20 3c 4e
6f 64 65 20 4c 65 76 65 6c 3d 22 33 22 20 54 79
70 65 3d 22 48 44 5f 46 72 61 6d 65 5f 50 6c 75
67 69 6e 22 3e 0d 0a 20 20 20 20 20 20 20 20 20
20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e 61
6d 65 3d 22 41 6c 70 68 61 22 3e 32 35 35 3c 2f
41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20
20 20 20 20 20 20 20 20 3c 41 74 74 72 69 62 75
74 65 20 4e 61 6d 65 3d 22 43 68 69 6c 64 54 79
70 65 22 3e 48 44 5f 54 65 78 74 5f 50 6c 75 67
69 6e 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a
20 20 20 20 20 20 20 20 20 20 20 20 3c 41 74 74
72 69 62 75 74 65 20 4e 61 6d 65 3d 22 46 72 61
6d 65 53 70 65 65 64 22 3e 34 3c 2f 41 74 74 72
69 62 75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20
20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e
61 6d 65 3d 22 46 72 61 6d 65 54 79 70 65 22 3e
30 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20
20 20 20 20 20 20 20 20 20 20 20 3c 41 74 74 72
69 62 75 74 65 20 4e 61 6d 65 3d 22 48 65 69 67
68 74 22 3e 31 32 38 3c 2f 41 74 74 72 69 62 75
74 65 3e 0d 0a 20 20 20 20 20 20 20 20 20 20 20
20 3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d 65
3d 22 4c 6f 63 6b 41 72 65 61 22 3e 30 3c 2f 41
74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20 20
20 20 20 20 20 20 20 3c 41 74 74 72 69 62 75 74
65 20 4e 61 6d 65 3d 22 4d 6f 74 6c 65 79 49 6e
64 65 78 22 3e 30 3c 2f 41 74 74 72 69 62 75 74
65 3e 0d 0a 20 20 20 20 20 20 20 20 20 20 20 20
3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d
22 50 75 72 69 74 79 43 6f 6c 6f 72 22 3e 32 35
35 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d 0a 20
20 20 20 20 20 20 20 20 20 20 20 3c 41 74 74 72
69 62 75 74 65 20 4e 61 6d 65 3d 22 50 75 72 69
74 79 49 6e 64 65 78 22 3e 30 3c 2f 41 74 74 72
69 62 75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20
20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e
61 6d 65 3d 22 54 72 69 63 6f 6c 6f 72 49 6e 64
65 78 22 3e 30 3c 2f 41 74 74 72 69 62 75 74 65
3e 0d 0a 20 20 20 20 20 20 20 20 20 20 20 20 3c
41 74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22
57 69 64 74 68 22 3e 32 35 36 3c 2f 41 74 74 72
69 62 75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20
20 20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e
61 6d 65 3d 22 58 22 3e 30 3c 2f 41 74 74 72 69
62 75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 20
20 20 20 3c 41 74 74 72 69 62 75 74 65 20 4e 61
6d 65 3d 22 59 22 3e 30 3c 2f 41 74 74 72 69 62
75 74 65 3e 0d 0a 20 20 20 20 20 20 20 20 20 20
20 20 3c 41 74 74 72 69 62 75 74 65 20 4e 61 6d
65 3d 22 5f 5f 47 55 49 44 5f 5f 22 3e 7b 66 38
66 31 30 63 32 30 2d 38 36 31 32 2d 34 32 35 36
2d 38 30 35 62 2d 66 32 66 62 66 61 31 34 62 35
62 66 7d 3c 2f 41 74 74 72 69 62 75 74 65 3e 0d
0a 20 20 20 20 20 20 20 20 20 20 20 20 3c 41 74
74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22 5f 5f
4e 41 4d 45 5f 5f 22 3e 54 65 78 74 31 3c 2f 41
74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 20 20
20 20 20 20 20 20 20 3c 4e 6f 64 65 20 4c 65 76
65 6c 3d 22 34 22 20 54 79 70 65 3d 22 48 44 5f
54 65 78 74 5f 50 6c 75 67 69 6e 22 3e 0d 0a 20
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 3c
41 74 74 72 69 62 75 74 65 20 4e 61 6d 65 3d 22
43 6c 65 61 72 45 66 66 65 63 74 22 3e 30 3c 2f
41 74 74 72 69 62 75 74 65 3e 0d 0a 20 20 20 )";
    
    // Convert hex string to byte array
    std::vector<u_int> data = hexStringToBytes(hexData);
    
    // Send the data
    if (sendToDevice(deviceIP, devicePort, data)) {
        std::cout << "Data sent successfully!" << std::endl;
    } else {
        std::cerr << "Failed to send data" << std::endl;
    }
    
    return 0;
}